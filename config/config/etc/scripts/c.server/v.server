#!/usr/bin/sh
#############
debug(){ printf "%s\n" "add server to vpnd, takes endpoint and address and/or public key file - ${1}";exit 1; }
#############

[ "${USER}" == "root" ] || debug "requires root"

[ "${#}" == "2" ] || [ "${#}" == "3" ] || debug "no input"

[ -z "${3}" ] && peer="$(curl --silent --connect-timeout 3 "http://${1}/shared/contacts/self/wireguard"|head -c44|strings)" || read peer < "${3}"

[ -z "${peer}" ] && debug "peer key failed"

[ "${#peer}" == "44" ] || debug "peer key failed"

#############

printf "\n%s\n\n" "${1} ${2} ${peer}" ; read

#############
ip link del tun
ip link add tun type wireguard
sysctl -w "net.ipv6.conf.tun.autoconf=0" &>/dev/null
sysctl -w "net.ipv6.conf.tun.accept_ra=0" &>/dev/null
wg set tun listen-port 51820 private-key "${storage}/.vpn/wireguard"
ip addr add "${2}/8" broadcast 10.255.255.255 dev tun
ip addr add "fd00::${2//./:}/64" dev tun
ip link set up tun
#############
wg set tun peer "${peer}" persistent-keepalive 60 endpoint "${1}:51820" allowed-ips "10.0.0.0/8,fd00::/64"
#############
printf "%s\n%s\n%s\n" "${1}" "${2}" "${peer}" >> "${storage}/.vpn/servers"
#############
printf "%s\n" "${1}" > "${storage}/.vpn/endpoint"
printf "%s\n" "${2}" > "${storage}/.vpn/address"
printf "%s\n" "${peer}" > "${storage}/.vpn/key"
#############
wg showconf tun > "${storage}/.vpn/config"
#############
v.flush
#############

