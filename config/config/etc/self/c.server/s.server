#!/bin/sh
#############
debug(){ printf "%s\n" "takes endpoint and or public key file - ${1}";exit 1; }
#############

[ "${USER}" == "root" ] || debug "requires root"

[ "${#}" == "1" ] || [ "${#}" == "2" ] || debug "no input"

[ -z "${2}" ] && peer="$(curl --silent --connect-timeout 3 "http://${1}/shared/contacts/self/sshd"|head -c80|strings)" || read peer < "${2}"

[ -z "${peer}" ] && debug "peer key failed"

[ "${#peer}" == "80" ] || debug "peer key failed"

#############

printf "\n%s\n\n" "${1} ${peer}" ; read

#############

grep -q "${1}"    "${storage}/.ssh/known_hosts" && debug "host already exists"
grep -q "${peer}" "${storage}/.ssh/known_hosts" && debug "peer key already exists"

printf "%s\n" "${1} ${peer}" >> "${storage}/.ssh/known_hosts"

printf "%s\n" "${1} ${peer}" >> "${home}/user/.ssh/known_hosts"
printf "%s\n" "${1} ${peer}" >> "${home}/nobody/.ssh/known_hosts"
printf "%s\n" "${1} ${peer}" >> "${home}/proxy/.ssh/known_hosts"
printf "%s\n" "${1} ${peer}" >> "${home}/jail/.ssh/known_hosts"

printf "%s\n" "${1} ${peer}" >> "${home}/ssh/.ssh/known_hosts"
printf "%s\n" "${1} ${peer}" >> "${home}/smtp/.ssh/known_hosts"
printf "%s\n" "${1} ${peer}" >> "${home}/http/.ssh/known_hosts"
printf "%s\n" "${1} ${peer}" >> "${home}/irc/.ssh/known_hosts"
printf "%s\n" "${1} ${peer}" >> "${home}/xmr/.ssh/known_hosts"

#############

s.flush

#############

