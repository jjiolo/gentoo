#!/usr/bin/sh
#############
usage(){
cat << EOF

 ${0} - ${1}

  -o oneshot
  -c cli
  -l logger
  -x xsetroot
  -h help

EOF
exit 1
}
#############
while getopts "oclxh" arg;do
 case "${arg}" in
  o) oneshot="true";;
  c) cli="true";;
  l) logger="true";;
  x) xsetroot="true";;
  h) usage help;;
  *) usage getopts;;
 esac
done
#############
[ -z "${oneshot}" ] && [ -z "${cli}" ] && [ -z "${logger}" ] && [ -z "${xsetroot}" ] && usage "no input"
#############
scale(){
   if [ "${#1}" -lt "4"  ];then tmp="${1}b"
 elif [ "${#1}" -lt "7"  ];then tmp="$((${1}/1000))k"
 elif [ "${#1}" -lt "10" ];then tmp="$((${1}/1000000))m"
 else                           tmp="$((${1}/1000000000))g";fi
 printf "%s\n" "${tmp}"
}
left(){ tmp="${1}";until [ "${#tmp}" -ge "${2}" ];do tmp="${tmp} ";done;printf "%s\n" "${tmp:0:${2}}"; }
right(){ tmp="${1}";until [ "${#tmp}" -ge "${2}" ];do tmp=" ${tmp}";done;printf "%s\n" "${tmp:0:${2}}"; }
#############

while :;do

output="[$(date +%Y:%m:%d:%H:%M:%S)]"

#cpu
user0="${user1:-0}"
nice0="${nice1:-0}"
system0="${system1:-0}"
idle0="${idle1:-0}"
iowait0="${iowait1:-0}"
irq0="${irq1:-0}"
softirq0="${softirq1:-0}"
steal0="${steal1:-0}"
#net
receive0="${receive1:-0}"
transmit0="${transmit1:-0}"
#disk
write0="${write1:-0}"
read0="${read1:-0}"

jobs %% &>/dev/null || { sync & }

#
read user1 nice1 system1 idle1 iowait1 irq1 softirq1 steal1 << EOF
$(awk 'NR==1{print$2" "$3" "$4" "$5" "$6" "$7" "$8" "$9}' /proc/stat)
EOF
cpu_total="$(((${user1}-${user0})+(${nice1}-${nice0})+(${system1}-${system0})+(${idle1}-${idle0})+(${iowait1}-${iowait0})+(${irq1}-${irq0})+(${softirq1}-${softirq0})+(${steal1}-${steal0})))"
cpu_usage="$(((${user1}-${user0})+(${nice1}-${nice0})+(${system1}-${system0})+(${irq1}-${irq0})+(${softirq1}-${softirq0})+(${steal1}-${steal0})))"
cpu_pct="$(((${cpu_usage}*100)/${cpu_total}))"
output="${output} [$(right ${cpu_pct} 3)%]"

#
read ram_total ram_available << EOF
$(awk '/MemTotal:|MemAvailable:/{printf$2" "}' /proc/meminfo)
EOF
ram_pct="$((((${ram_total}-${ram_available})*100)/${ram_total}))"
output="${output} [$(right ${ram_pct} 3)%]"

#
read one five fifteen processes pid < /proc/loadavg
output="${output} [$(right ${one} 4) $(right ${five} 4) $(right ${fifteen} 4) $(right ${processes} 6) $(right ${pid} 5)]"

#
udpl="$(awk '$4=="07"{count++}END{print count}' /proc/net/udp /proc/net/udp6)"
udpe="$(awk '$4=="01"{count++}END{print count}' /proc/net/udp /proc/net/udp6)"
tcpl="$(awk '$4=="0A"{count++}END{print count}' /proc/net/tcp /proc/net/tcp6)"
tcpe="$(awk '$4=="01"{count++}END{print count}' /proc/net/tcp /proc/net/tcp6)"
output="${output} [$(right ${udpl:-0} 3):$(left ${udpe:-0} 3)] [$(right ${tcpl:-0} 3):$(left ${tcpe:-0} 3)]"

#
read receive1 transmit1 << EOF
$(awk 'NR>2{receive+=$2;transmit+=$10}END{print receive" "transmit}' /proc/net/dev)
EOF
receive="$((${receive1}-${receive0}))"
transmit="$((${transmit1}-${transmit0}))"
output="${output} [v$(right $(scale ${receive}) 5) ^$(right $(scale ${transmit}) 5)]"

#
read read1 write1 << EOF
$(awk '{read+=$6;write+=$10}END{print read" "write}' /proc/diskstats)
EOF
read="$((${read1}-${read0}))"
write="$((${write1}-${write0}))"
output="${output} [v$(right $(scale ${write}) 5) ^$(right $(scale ${read}) 5)]"

#
read  dirty writeback << EOF
$(awk '/Dirty:|Writeback:/{printf$2" "}' /proc/meminfo)
EOF
output="${output} [$(right $(scale ${dirty}) 5) $(right $(scale ${writeback}) 5)]"

#
output="${output} [$(df -Ph 2>&1|awk '/z.local$/{print$5}')]"

#
read -r uptime < /proc/uptime
days="000" hours="00" minutes="00" seconds="${uptime%%.*}"
[ "${seconds}" -gt "59" ] && minutes="$((${seconds}/60))" seconds="$((${seconds}%60))"
[ "${minutes}" -gt "59" ] && hours="$((${minutes}/60))" minutes="$((${minutes}%60))"
[ "${hours}"   -gt "23" ] && days="$((${hours}/24))" hours="$((${hours}%24))"
[ "${#days}" == "2" ] && days="0${days}"
[ "${#days}" == "1" ] && days="00${days}"
[ "${#hours}" == "1" ] && hours="0${hours}"
[ "${#minutes}" == "1" ] && minutes="0${minutes}"
[ "${#seconds}" == "1" ] && seconds="0${seconds}"
output="${output} [${days}:${hours}:${minutes}:${seconds}]"

#
if [ -d /sys/class/power_supply/BAT0 ];then
[ -f /sys/class/power_supply/BAT0/charge_full ] && read -r full < /sys/class/power_supply/BAT0/charge_full
[ -f /sys/class/power_supply/BAT0/charge_now  ] && read -r now  < /sys/class/power_supply/BAT0/charge_now
[ -f /sys/class/power_supply/BAT0/energy_full ] && read -r full < /sys/class/power_supply/BAT0/energy_full
[ -f /sys/class/power_supply/BAT0/energy_now  ] && read -r now  < /sys/class/power_supply/BAT0/energy_now
power="$(((${now}*100)/${full}))"
output="${output} [${power}%]"
fi

#############
[ -z "${oneshot}"  ] || { printf "%s\n" "${output}";break; }
[ -z "${cli}"      ] || printf "\n%s" "${output}"
[ -z "${logger}"   ] || logger -t "keepalive" "${output}"
[ -z "${xsetroot}" ] || xsetroot -name "${output}"
#############

sleep 1

done

