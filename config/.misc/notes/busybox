
#############
busybox only log server...
 -------------
 syslogd -R 172.16.0.1:514 -StD
 udpsvd 0.0.0.0 514 tee -a /tmp/logfile
 -------------
 cli - udpsvd 0.0.0.0 4444 stdbuf -oL /bin/udpsvd.script
 udpsvd.script - exec tr -cd 'a-zA-Z0-9' <&0 >>/tmp/udpsvd.log
 ^ actually works
 -------------
#############

[shlel]
-------------
tl;dr - end goal: template sane defaults regardless of whats executed
-------------

 exec setsid command </dev/null &>/dev/null & exit

 ^ exec irrelivent with force detach (backgrounding)
   & exit force close the initialising shell

 su -l -s /bin/sh -c 'setsid command </dev/null &>/dev/null & exit' user
 setsid setpriv --reuid --regid --init-groups --reset-env --nnp --securebits command </dev/null &>/dev/null & exit

-------------

 end goal : 

  force normal daemonization on any execute
  reset env
  force terminal detach
  force stdin/stdout/stderr redirection
  force background
  force initializing shell to close

  force normal priv drop on any client execute...

      setsid - prevent signals to controlling terminal
  </dev/null - prevent reading terminal input ? (partial keylogging)
  &>dev/null - prevent updating terminal ? (sort of useless for a client)

  ^ prevent executed pid from hanging and reading terminal input ?

-------------

* for su...
  su -l -s /bin/sh -c 'setpriv command </dev/null &>/dev/null & exit' user
  ^ -l cleans environment for priv drop
    forces terminal detach
    forces stdin/stdout/stderr redirect
    forces background
    forces the initializing shell to close

-------------

* for setpriv...
  setsid setpriv --reuid --regid --init-groups --reset-env --nnp --securebits command </dev/null &>/dev/null & exit
  ^ --reset-env cleans environment for priv drop
    forces terminal detach (signals allow execution)
    forces stdin/stdout/stderr redirect ? (optional client not server)
    forces background ? (not relevent)
    forces the initalizing shell to close ? (optional client not server)

-------------

* differences...

  su and setpriv both support setuid setgid

  su and setpriv both support cleaning environment
  ^ (--reset-env less efficient than -l login shell)

 cons - BUSYBOX SETPRIV DOESNT ACTUALLY WORK YET...
 cons - --reset-env is weaker than su -l

 pros - setuid setgid setcap nnp securebits, noroot nosetuid ?

-------------

#############


 exec sleep 13 &
(exec sleep 13 </dev/null &>/dev/null &)

^ exec inside a subshell kills the subshell not the parent...

su creates a subshell ? su -c 'sleep 30 &' double forks...
su without exec leaves the -s /bin/sh shell open... ?

-------------
         exec - replace current shell with command
 background & - execute in parallel
     {inline} - execute inline
   (subshell) - execute inside a subshell
   </dev/null - replace stdin
  &>/dev/null - replace stdout & stderr
-------------
 * su -l -s /bin/ash -c 'command </dev/null &>/dev/null' user
 * su -l -s /bin/ash -c 'command' user </dev/null &>/dev/null
 ^ <redirects &>redirects inherited by child process
-------------
ash -l            [-c 'command'] <user> [< file] [<< EOF]
 su -l -s /bin/sh [-c 'command'] <user> [< file] [<< EOF]
 setsid <command>
 setpriv --nnp --reuid --regid --init-groups --ambient-caps --inh-caps --bounding-set --reset-env <command>
 env -i <command>
 chroot /path <command>
-------------
su -l -s /bin/ash -c 'exec command </dev/null &>/dev/null & exit ' <user>
-------------
su -l -s /bin/ash <user> << EOF # horrible \$(escape) \${characters}
su -l -s /bin/ash <user> < /path/to/file # works without \${escapes}
-------------
su -l -s /bin/ash <user> < /path/to/file > /path/to/output
dbclient -T <user>@172.16.0.1 < /path/to/file > /path/to/output
-------------

 [controlling terminal fuck up]

 etc/self/f.setpriv - setpriv doesnt remove controlling terminal
  setpriv_udhcpc - libcap exposes net_bind_service,net_raw,net_admin, controlling terminal allows root exec
  setpriv_tftpd - libcap exposes net_bind_service,sys_chroot, controlling terminal allows root exec (missed because execution from /etc/inittab sysinit) (reexecution hooks controlling terminal)
  setpriv_ntpc - libcap exposes sys_time, controlling terminal allows root exec

 examples

 * setsid su -ls /bin/sh -c 'while sleep 3 ; do echo test ; done' nobody
 ^ read and write access ? (read would imply keylogging the controlling pts?)

 * setsid su -ls /bin/sh -c 'cat /dev/pts/1' nobody
 ^ permission denied cant open /dev/pts/1... (opens fd before setuid setgid)

 * setsid su -ls /bin/sh -c 'while sleep 3 ; do echo test ; done </dev/null' nobody

-------------

 * etc/services/*/start -
   setsid su - disables interactive shell ?
   su setsid - allows interactive shell ?

 * etc/services
 * etc/self/e.setpriv
 ^ uniform command wrapper to provide the safest execution ?

  setsid setpriv command </dev/null
  ^ removes controlling terminal ?
    removes keylog controlling terminal ?
    allows display controlling terminal ?

  su < file - not eval...
  su << EOF - technically eval ?
  su -c 'still eval'

  dbclient user@remote < file - not eval...
  dbclient user@remote << EOF - eval
  dbclient user@remote $command - eval

  test='ls -lah' ; $test - still eval...

 ^ assumed grep -r eval path/* was useful
 ^ assumption change implies proof reading all code...

 setsid setpriv --options binary </dev/null &>/dev/null &
 ^ redirectors on which command ?
   testing implied setpriv </dev/null && binary </dev/null ?



#############

[chroot hardening]

 delete busybox binary after stand alone shell loads
 exec prefers applets < - refer to /proc/self/exe before trying PATH
 standalone shell < - refer to /proc/self/exe before trying PATH
 rm -rf /bin/busybox ; exec <service> </dev/null &>/dev/null
 leaves the program running in a chroot with no other commands available

#############
busybox with unix_sockets - nc -lks local:/dev/shm/socket -e dbclient user@172.16.0.1 nc local:/dev/shm/socket
#############

[login/password management utilities]

 support shadow passwords

 use internal password and group functions rather than system functions 
  use internal shadow password functions

 use internal crypt functions
  enable sha256/512 crypt functions

 ^ links to glibc even if its not used ?
   ie use built in over external || remove built in and external

 ! couldnt figure it out so enabled anything
   prefering internal libs over linking externally...

#############
0 0 1 1 * year
0 0 1 * * month
0 0 * * 0 week
0 0 * * * day
0 * * * * hour
* * * * * minute
m h d m w
i o a o e
n u y n e
u r   t k
t     h
e
#############

#############
setsid    - run program in a new session
taskset   - lock processes to cores
nice      - runs a program with modified scheduling priority
renice    - alters the scheduling priority of one or more running processes
ionice    - set program io scheduling class and priority
chrt      - manipulate real-time attributes of a process
choom     - echo 123 > /proc/1/oom_score_adj -999 unlikerly to be killed 1000 likely to be killed
#############

-------------

 [setsid]

  setsid command </dev/null &>/dev/null

  start <command> in new session
  removes controlling tty
  redirects stdin stdout stderr

  prevents process from sending SIGNALS to controlling terminal

  setsid su -l -s /bin/sh -c '<command>' <user> [</dev/null] [&>/dev/null]

-------------

 [tasket]

  taskset -p <hexmask> <pid>
  taskset    <hexmask> <prog> <args>

  cat /proc/$$/status | grep -e Cpus_allowed

-------------

 [nice/renice]

     ulimits -e {0-39} # scheduling priority
 renice -n +1 -u $USER # incrementing allowed                 (reduces  scheduling priority)
 renice -n -1 -u $USER # decrementing allowed upto ulimits -e (increase scheduling priority)

------------- 

 [ionice]

 ionice -p <pid> < - display priority

 ionice -c 1 -n {0-7} -p $$ < - root only real time
 ionice -c 2 -n {0-7} -p $$ < - none root best effort
 ionice -c 3          -p $$ < - none root idle

 defaults to best-effort:2 priority:4

 if unassigned derives priority from process nice level

 io_priority = nice + 20 / 5

-------------

 [chrt]

     RR chrt -pr (1-99) -p $$ NICE: -   PRIORITY: 1(41) 99(139) root only
   FIFO chrt -pf (1-99) -p $$ NICE: -   PRIORITY: 1(42) 99(139) root only
  OTHER chrt -po (0)    -p $$ NICE: -20 PRIORITY: 0(39)         none root
  BATCH chrt -pb (0)    -p $$ NICE: -20 PRIORITY: 0(39)         none root
   IDLE chrt -pi (0)    -p $$ NICE: -   PRIORITY: 0(39)         none root

  ulimits -r 30 # realtime priority
 chrt -pr 29 $$ # true
 chrt -pr 31 $$ # fail

^ realtime priority allows changing rr || fifo from 1-99 (auto appending +39 from nice)

-------------

 [choom]

  display and adjust oom-killer score

  echo 123 > /proc/1/oom_score_adj

  -999 unlikely to be killed
  1000 likely to be killed

#############

[ busybox_init ]

 /init - > /etc/inittab - > /etc/init - > /etc/profile

     umask - sanity check
 variables - global
       PS1 - unique to ${USER} shell prompt
       set - control default shell options
   ulimits - default pid limits unique to ${USER}
    renice - default nice levels unique to ${USER}
   aliases - global
 functions - global

   root:
desktop: input:/dev/input video:/dev/dri
   toor: audio:/dev/snd

#############

[busybox]

 runparts
 uevent - listen for device creation
 acpid - listen for hardware interupts from devices

 mkswap swapon swapoff
 hdparm
 rfkill

 findfs LABEL=testing || mount LABEL=testing
^ implies handling || false

#############

* drop chrt and not using realtime or priority over 39 ?
* drop ionice ?
  allows single user to prioritise its own pids ?
  allows single user to steal diskio from other users ?
^ or only competing inside its own nice level restrcitions

#############

 [busybox]

 * -werror - doesnt build

 * default - enable all long options
 ^ some binaries do nothing
   others get increased functionality

 - vi inline editing CONFIG_FEATURE_EDITING_VI
 ^ set -o vi (doesnt turn on when disabled)
 ^ (exists in set -o output regardless)

 * track window size changes FEATURE_EDITING_WINCH - turned on the PS1 reprint disabled
 ? query cursor position from terminal
 ^ settings claims 'more robust'
 ^ vi claims last ditch effort
 ^ less claims last ditch effort
 ^^ made it uniform (global+vi+less)

 * unicode support - stop printing dumb characters on output

 -archival utilities-

 ? unzip - firmware files are always .zip encoded... gets annoying

 -coreutils-

  * CONFIG_FEATURE_PRESERVE_HARDLINKS ?
  ^ mv does preserve hardlinks 
  ^ cp doesnt preserve hardlinks misleading ?
  ^^ tl;dr fuck hardlinks no visability and weird functionality

  * copy long options --reflink (ext4 doesnt support it)

  ? ls - fairly sure -w <width> doesnt do anything ?

  ? head and tail - fancy output options dont match ?

  * expr - more hardened compared to test ?
  * test - extend test to 64 bit (assuming larger numbers ?)
  ^ test --help would be awesome...

  ** touch - SUSV3 allows timestamps etc ?

 -console utilities-
 -debian utilities-

  * run-parts - technically awesome for cronjobs / config directories (hard requirement for acpid)

 -klibc-utils-
 -editors-

  * diff long options - doesnt do anything

 -find utilities-
 -init utilities-

  ? linuxrc - remove pid1 check allow init as supervisor daemon in chroots ?

 -login/password management utilities-
 -linux ext2 fs progs-
 -linux module utilities-
 -linux system utilities-

 * setpriv - wish it worked ?

 * mkswap - testing zram zswap
 * swapon - testing zram zswap
 * swapoff - testing zram zswap

 * acpid - know what it does provides extra functionality ?
 * uevent - prints out udev information (suppose to be used with mdev)

 * getopt isnt getopts ?
 ^ norm: enable shell built-in and applet
 ^ breaks norm different name / program...

 -miscellaneous utilities-

 * crond - -fd (foreground and log to stderr for debug?)
 * hdparm - doesnt support hdparm -W /dev/disk to view write cache status...

 -misc utilities-

  * microcom - used it to flash openwrt devices...

 -networking-
 -print utilities-
 -mail utilities-
 -process utilities-
 -runinit utilities-
 -shells-

 * CONFIG_FEATURE_SH_NOFORK - may significantly speed up shell scripts ?
 ^ grep APPLET_NOFORK include/applets.h | grep ^IF | wc -l == 40 applets only ?

 -system logging utilities-

-------------

 busybox
  doesnt need
   libcrypt
   libm
   librt
  needs
   libresolv

 ^ login/password management utilities - internal crypt stuff removed dependencies

 ? more than nslookup using libresolv... (it uses internal code?)

 ^ qemu silently linking to glibc for alot of libraries...

-------------
  * echo -n -e 
  ^ check $variable with -tac fuck ups...
  *  command $variable - always parses -tac options
  *  "force it to be read as a single arguement"
  *  ^ anything with a space dies
-------------
#############

