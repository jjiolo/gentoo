
#############
aes-gcm-siv < - shiny new new (added nonce reuse protection)
#############

 openssl genpkey -algorithm ed25519 -out key.pem
 openssl pkey -pubout -in key.pem -out key.pub
 openssl ec -pubout -in ed25519 -out ed25519.pub;

 openssl pkeyutl
  -sign -inkey key.pem
  -rawin -in file
  -out file.sig

 openssl pkeyutl
  -rawin -in file
  -verify -sigfile file.sig
  -pubin -inkey key.pub

 openssl pkeyutl
  -derive
  -inkey me.private
  -peerkey you.public
 ^ doesnt work...

 openssl s_server -dtls1_2
 openssl s_client -dtls1_2
 ^ doesnt work with ed25519

 openssl pkeyutl -kdf TLS1-PRF -kdflen 64 -digest sha512
 openssl pkeyutl -kdf XXX
 {TLS1-PRF,HKDF,SSKDF,PBKDF2,SSHKDF,X942KDF-ASN1,X942KDF-CONCAT,X963KDF,SCRYPT}

#############

#############
no-http - might break ocsp ? (opensmtpd)
#############
no-engines -
no-static-engines -
no-dynamic-engines -
no-module -
^ disabled engines completly ?
#############
{no,enable}-pinshared
 no - dont try to stay in memory ?
 enable - try to stay in memory ?
^ says default is enable-pinshare ?
#############
no-tfo (tcp fast open, fingerprintable ?)
#############

############# generic descriptions (got sick of searching)
cmp  - cryptographic management protocol ? 
crmf - certificate request message format ?
cms  - cryptographic message syntax ? smime... (openssl cms -help)
comp - compression support with static/dynamic zlib
ct   - certificate transparency
npn  - next protocol negotiation (port 443 spdy hand off ? irrelivent imo http2)
crl  - certificate revocation list (requests all certs doesnt scale)
ocsp - online certificate status protocol (crl replacement request individual certs)
oscp - stapling < - request signed timestamp, prove time since last revoke, reduce ocsp load
psk  - pre shared key cipher suites
srp  - secure remote password cipher suites
srtp - secure real-time transport protocol (dtls extension)
sctp - stream control transmission protocol dtls over sctp and or dtls over udp
sse2 - cpu flags enabled in ffmpeg already
tfo  - tcp fast open
ech  - encrypted client hello
hpkp - http public key pinning
hsts - http strict transport security (always use https)
#############
acvp - automated cryptographic validation protocol
#############

locked configure options...

 enable-deprecated - python wpa_supplicant opensmtpd wget tor
 enable-engine     - kernel.build (breaks without engines?)
 enable-sock       - curl mutt links wget python transmission tor
 enable-threads    - tor/python
 enable-tls        - (no-tls does not disable tls if tls1_1 tls1_2 are in use)
 enable-dh         - python tor
 enable-ecdh       - tor
 enable-ecsda      - tor
 enable-scrypt     - python
 enable-http       - opensmtpd

#############

[openssl client]

 log every request and fingerprint every certificate in the chain

 eg. curl https://domain.tld - > domain.tld:fp0:fp1:fp2:
     openssh known_hosts tofu style

worst case...

 client accepts all valid certificates regardless of the fingerprint chain
 only display changes to fingerprints related to the domain

best case...

 client alerts on all changes to the domains fingerprint chain
 and forces the user to verify proceeding

either way...

 allows building up a profile of domains and their compitency
 allows building up a profile on certificate providers and their compitency

examples...

every domain you have ever visted suddenly starts using the same certificate authority
 someones using a popped ca to dynamically sign every requests you made

single domain keeps flipping the fingerprint chain
 cant be trusted to protect their own private keys

lowest point in the chains fingerprint keeps flipping
 probably roaming and hitting geo based round robin or anycast

fingerprint changes every 4 months
 someone using an automated lets encrypt setup

^ still implies generating as much historical information as possible to predict future actions

^ sharing this data globally (proofs in the maths it cant be spoofed)
  allows painting a larger picture of the current environment

#############

 [cert revoke]

  ocsp > crl - ability to lookup individual certificates (reduce load)

  ??? - pushes timestamp from server to remove revoke lookup (reduce load)

  ^ cant remember the name ?

#############

 [env]

HOME=.
path=$ENV::HOME/keyring

 [oids] - assign more key value pairs in -subj

oid_section=new_oids

[ new_oids ]
one = 1.2.3.4.1
two = 1.2.3.4.2

[ ca ]
crl = crl.pem # current crl
crlnumber = crlnumber # current crl number

#############

dtls 

+enable-psk
+enable-dtls
+enable-dtls1_2
+enable-dtls1_2-method
+enable-dgram
-------------
openssl s_server -nocert -dtls -psk $(echo test|hexdump '1/1 "%02x"') -accept 127.0.0.1:4444
openssl s_client -dtls -psk $(echo test|hexdump '1/1 "%02x"') -connect 127.0.0.1:4444
-------------
while sleep .1 ; do openssl s_client -dtls -psk 746573740a -bind 127.0.0.1:3333 -connect 127.0.0.1:4444 ; done
while sleep .1 ; do openssl s_client -dtls -psk 746573740a -bind 127.0.0.1:4444 -connect 127.0.0.1:3333 ; done
-------------
^ CONNECT unexpected message...
^ one needs to open a client backend piped through netcat...
^ one needs to open a server backend piped through netcat...
-------------
nc -u -s 127.0.0.1 -p 4444 127.0.0.1 3333
nc -u -s 127.0.0.1 -p 3333 127.0.0.1 4444
-------------
forced to netcat -udp dtls is irrelivent ? (tcp over udp)

#############

