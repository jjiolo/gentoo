
#############

 [gitd]

 z.testing/project - default read only

 httpd,{gitd,p2pd}
 ^ version tracking
 ^ release distribution

 [basic authentication]

 /cgi-bin:root:password
 /cgi-bin/project.git:toor:drowsapp
 ^ doesnt work

 /cgi-bin/project.git:toor:drowsapp
 /cgi-bin:root:password
 ^ does work

 /cgi-bin:root:password # applies to all new files
 /cgi-bin/new.cgi:root:password # restart to secure individual files

 ! dont have a git repository path ?
   $HOME/<user>/git - no httpd:git(d) access ?
   $HOME/git(d) - needs optional httpd write ?
   $services/git(d) - needs optional httpd write ?


#############

 [./configure --help] (ignores most options)

  cd git-A.B.C ; ./configure.sh > configure.sh
  cd git-X.Y.Z ; ./configure.sh > configure.sh

  diff git-A.B.C/configure.sh git-X.Y.Z/configure.sh

  cd git-A.B.C ; find . -type f -exec grep -H YesPlease {} \; > ffs
  cd git-X.Y.Z ; find . -type f -exec grep -H YesPlease {} \; > ffs

  diff git-A.B.C/ffs git-X.Y.Z/ffs

  grep '#' Makefile
  grep '#' configure
  find . -type f -exec grep -Hi -e '/*' -e '#' {} \; # code comments

  -------------

  INSTALL_SYMLINKS=YesPlease
  SKIP_DASHED_BUILT_INS=YesPlease
  ^ jsmin cssmin --disable setting no as path and enabling it ?

#############

 [busybox httpd + git]

-------------

 [variables]

  GIT_DIR --git-dir=/tmp/git
  GIT_PROJECT_ROOT
  GIT_HTTP_EXPORT_ALL - export all directories
  .git/git-daemon-export-ok - export directories with magic file

-------------

  # setup bare repository and working directory
   git init --bare --initial-branch master /run/git/bare
   git clone --depth=1 file:///run/git/bare /run/git/working
   echo readme >> /run/git/working/README.md
   GIT_DIR=/run/git/working/.git git add -A
   GIT_DIR=/run/git/working/.git git commit -m readme
   GIT_DIR=/run/git/working/.git git push

  # add git-http-backend to httpd config file
   httpd.conf - *.git:/usr/libexec/git-core/git-http-backend

  # create project.git in httpd webroot/cgi-bin
   install -o root -g root -m 0600 /dev/null webroot/cgi-bin/project.git

  # start httpd
   env -i GIT_PROJECT_ROOT=/srv/git GIT_HTTP_EXPORT_ALL= /sbin/httpd -p 80 -h webroot -c config

  # clone
   git clone --depth=1 http://root:password@127.0.0.1/cgi-bin/project.git $HOME/project # authenticated
   git clone --depth=1 http://127.0.0.1/cgi-bin/project.git $HOME/project # unauthenticated

  # pull
   GIT_DIR=$HOME/project/.git git pull

  # git push - basic_auth
    httpd.conf - /cgi-bin/project.git:root:password

  # git push - unauthenticated
   printf "\n%s\n\n%s\n\n" "[http]" "receivepack = true" > .git/config

  # git push
   echo first >> $HOME/project/first
   GIT_DIR=$HOME/project/.git git add -A
   GIT_DIR=$HOME/project/.git git commit -m first
   GIT_DIR=$HOME/project/.git git push

  # git push
   cgi scripts execute as httpd:
   read only access to /run/git
   blocks the ability to push updates
   regardless of httpd config # authenticated
   regardless of git config # unauthenticated

-------------

 [UPDATED]

 git init --bare --initial-branch master /tmp/git ; chown -R httpd:httpd /tmp/git

 /tmp/storage/services/httpd/webroot/cgi-bin/project.git
 GIT_PROJECT_ROOT=/tmp/git GIT_HTTP_EXPORT_ALL= exec /usr/libexec/git-core/git-http-backend

 git clone http://127.0.0.1/cgi-bin/project.git

 ^ cgi scripts allow pointing to any git repository
   read only access
   read write authenticated access
   /cgi-bin/one:root:password
   /cgi-bin/two:user:password

 * allows multiple read or read write repositories

-------------

 gitweb - tar xf git.tar.gz && cd git/gitweb && make gitweb && make install-gitweb

-------------

 umask 0022 ; git init --bare --initial-branch master /tmp/git ; umask 0077

-------------

#############
=============
git hooks
=============
commit
 pre-commit
 prepare-commit
 commit-msg
 post-commit
email
 format-patch
 applypatch-msg
 pre-applypatch
 post-applypatch
other
 pre-rebase
 post-rewrite
 post-checkout
 post-merge
 pre-push
server
 pre-receive
 update
 post-receive
=============
find . -type f -exec openssl sha512 {} \; | sort | gpg --detach-sign --output /tmp/manifest
find . -type f -exec openssl sha512 {} \; | sort | gpg --verify /tmp/manifest -
=============
#############

[cheat sheet]

#############

git init --bare --initial-branch master "/tmp/git/bare"

git clone --depth=1 "file:///tmp/git/bare" "/tmp/git/working_directory"

#############

### git clone ( git fetch && git merge )
git clone --depth 1 ssh:// http:// file://                    # shallow clone master
git clone --depth 1 ssh:// http:// file:// -b <branch>        # shallow clone branch
git clone --depth 1 ssh:// http:// file:// --no-single-branch # shallow clone all branches

### git pull ( git fetch && git merge )
git stash      # hide changes
git pull
git stash list # view saved edits
git stash pop  # add changes
git stash drop # delete changes

### git fetch
git fetch
git fetch --depth 1 --all --prune

### git merge
git merge

### git add
git add -A

### git commit
git commit -m message

### git push
git push -all --prune # push all local branches to the remote repository

#############
-------------
 git init --bare --initial-branch production "${HOME}/project.bare" # create bare repository
 git clone --depth=1 "file://${HOME}/project.bare" "${HOME}/project.working" # create working repository
 export GIT_DIR="${HOME}/project.working/.git" # set git directory
 printf "%s\n" "readme" > "${HOME}/project.working/README.md"
 git add -A
 git commit -m "readme"
 git push
 git branch development # create development branch (local)
 git branch staging # create staging branch (remote)
 git checkout staging # switch to local development branch
 git push --all --prune # push newly created branches remotely ?
 git pull --all --prune # pull all newly created branches locally ?
-------------
 git checkout -b new
 git push --all --prune
 git pull --all --prune
-------------
 git clone --depth=1 http://127.0.0.1/cgi-bin/project.git
 git remote set-branches origin '*'
 git pull --depth=1 --all --prune
-------------
 * sync only --depth=1 for all local and remote branches ?
-------------

 TODO

 merge staging into development
 push development into staging

 merge prod into staging
 push staging into prod

 ^ ???

 create tags for version releases...
 create releases for tarball pulls...

-------------

#############
git add . -u          # add files and update (removes deleted)
git commit -m message # make new commit from added files
git push              # push new commit to upstream
#############
git log     # commit history
git status  # files added since last commit
git diff    # diff since last commit
#############
git reset --hard origin/master # revert back to master
git reset --hard <commit>      # revert back to given commit
git reset --hard               # revert back to last commit
#############
git remote -v             # list all remote repositories
git branch -a             # list all branches
git tag -l                # list all tags
git fetch remote <branch> # fetch branch from upstream
git branch new_branch     # create new branch
git checkout new_branch   # point HEAD to new_branch
git add . -u              # add files to branch
git commit -m 'branch'    # commit the branch
git checkout master       # revert to master
git merge new_branch      # merge branch into master
git -d origin new_branch  # delete the new branch
git push -d new_branch    # delete remote branch
#############

### git rebase

git rebase

#############

### git tags
### alias to commit hash
### directory full of tags that reference a specific commit
### changing branch should still show tags if they exist in that specific branch ?
### eg branch, add, commit, create_tag, revert to master, tag exists for none existing commit

git fetch --all --tags --prune # pull all tags

git tag v0.0.1 # create a new tag (for current HEAD commit hash)
git tag v0.0.2 -am 'annotate the release'

git tag -l             # view tags
git checkout tag/<tag> # change head to tagged commit

git push origin v0.0.2 # push tag upstream
git push origin --tags # push all tags upstream

#############

# force sync upstream

  git fetch --all

  git reset --hard origin/master

#############

