
#############
going to reduce and just wrap lfs with portage into chroot see what happens
#############

 got bored, started writing a posix script set to pull gcc toolchain

 builds     < - variables,download(),configure(),compile(),install()
 downloads  < - source directory
 functions:
  download  < - if it doesnt exist download... if it exists verify (if link_signature is set)... (dropped checksumming ? doesnt really work)
  configure < - ./configure || cmake -D || any changes to source at all
  compile   < - make
  install   < - make install

 * download only touches a single directory
 * configure/compile/install < - all need to trap back to the same point pretty much a single function
 ** then functions are start / finish from an atomic state and trap clean up ?

 keyring    < - used to verify any signed packages
 packages   < - tarballs of built packages
 rootfs     < - dump the entire toolchain into a chroot ?
 work       < - somewhere to unpack configure and build packages tmpfs

 environment  < - create all directories and setup permissions properly
 variables    < - cflags (+all common ./configure settings)
 bootstrap    < - populate a chroot with base-devel
 build        < - build individual packages

 binutils - > gcc(mpfr,gmp,mpc) - > linux_headers - > musl - > libstdc++ - > binutils - > gcc(mpfr,gmp,mpc)

 bootstrap... setup the initial build chroot

 chroot.root   < - cookie cutter chroot set
 chroot.nobody < -
 chroot.umount < -
 chroot.xephyr < -

 general plan is lfs with busybox to create a chrootable toolchain < - variables to dump cross compilers...

 package sets ? < - build toolchain pull the individual packages and dump them all ?
 wasnt even going to touch dependencies if i can just dump a package set in the correct install order ?

#############
nesting traps... atomic operations keepwork noclean
#############
download into verify and checksum if it passes or revert back to failure delete known bad data...

download/verify/checksum < - same image

environment
bootstrap
build
functions
 downloads
 verify
 checksum
 configure
 compile
 install

#############


#############
binutils -
gcc - mpc mpfr gmp
linux-headers
glibc musl
libstdc++

binutils
#############

#############
osdev wiki dep list - gcc/make/bison/flex/gmp/mpc/mpfr/texinfo
lfs dep list - bash/binutils/bison/bzip2/coreutils/diffutils/findutils/gawk/gcc/glibc/grep/gzip/linux-kernel/m4/make/patch/perl/sed/tar/texinfo/xz
############# binutils1
mkdir build && cd build
../configure
 --prefix=/tools # directory to store chroot output
 --with-sysroot=/storage/crossdev/<arch> # where to look for system libraries cross compiler
 --with-lib-path=/tools/lib # lib path
 --target=<arch> #
 --disable-nls #
 --disable-werror #
############# gcc
tar xf mpfr.tar.gz # in gcc directory
tar xf gmp.tar.gz 
tar xf mpc.tar.gz 
../configure\
 --target=
 --prefix
 --with-glibc-version
 --with-sysroot
 --with-newlib
 --without-headers
 --with-local-prefix
 --with-native-system-header-dir
 --disable-nls
 --disable-shared
 --disable-multilib
 --disable-decimal-float
 --disable-threads
 --disable-libatomic
 --disable-libgomp
 --disable-libmpx
 --disable-libquadmath
 --disable-libssp
 --disable-libvtv
 --disable-libstdcxx
 --enable-languages=c,c++
############# binutils 2
../configure
 --prefix=
 --disable-nls
 --disable-werror
 --with-lib-path
 --with-sysroot
#############

#############
lfs - 
 change location of gccs default dynamic linker to use...
 /lib/ld- < - default hardcoded into binary ?
^ dont need to lfs can chroot into subdirectory

crossdev < - doesnt c++ in stage1

#############

-sysroot < - where to look for libraries on the system...

portage binutils deps
binutils tests < - dejagnu ?
nls gettext    < - not using it
doc            < - texinfo no ducks
flex
virtual yacc ? bison

build order 
 binutils < - gcc glibc run tests on the linker

gcc -printprog-name=ld

package sets

--with-path
 PATH/include
 PATH/libs

CFLAGS=-I/path/to/include
LDFLAGS=-L/path/to/shared/libs

#############
prefix                 - 
exec-prefix            - 
program-prefix         - 
program-suffix         - 
program-transform-name - 
build this arch        - 
host for arch          - 
#############

#############
links.toolchain needs to pull in build order
links.gnupg needs to pull in build order
#############
https://gnupg.org/download
#############
gnupg        https://gnupg.org/ftp/gcrypt/gnupg/gnupg-x.y.z.tar.bz2
libgpg-error https://gnupg.org/ftp/gcrypt/libgpg-error/libgpg-error-x.y.tar.bz2
libgcrypt    https://gnupg.org/ftp/gcrypt/libcrypt/libgcrypt-1.8.4.tar.bz2
libksba      https://gnupg.org/ftp/gcrypt/libksba/libksba-1.3.5.tar.bz2
libassuan    https://gnupg.org/ftp/gcrypt/libassuan/libassuan-2.5.2.tar.bz2
ntbTLS       https://gnupg.org/ftp/gcrypt/ntbtls/ntbtls-0.1.2.tar.bz2
nPth         https://gnupg.org/ftp/gcrypt/npth/npth-1.6.tar.bz2
############

############
binutils https://ftp.gnu.org/gnu/binutils
make     https://ftp.gnu.org/gnu/make
bison    https://ftp.gnu.org/gnu/bison
flex     https://github.com/westes/flex
gmp      https://gmplib.org/download/gmp/gmp-x.y.z.tar.lz
mpc      https://fgtp.gnu.org/gnu/mpc
mpfr     https://www.mpfr.org/mpfr-current/mpfr-4.0.1.tar.xz
texinfo  https://ftp.gnu.org/gnu/texinfo
gcc      https://ftp.gnu.org/gnu/gcc/gcc-8.2.0/gcc-8.2.0.tar.xz
#############

#############
../configure --prefix=/usr/<toolchain>

binutils -
mkdir build && cd build
../configure --prefix=/usr/<toolchain> --disable-nls --disable-werror
make install

mv libiconv gmp mpfr mpc gcc

prefix=/usr/<toolchain>
exec-prefix=<toolchain>
bindir=${prefix}
#############

#############
gentoo=/usr/local/x86_64-pc-linux-gnu
emerge -av crossdev
PORTDIR_OVERLAY="/usr/local/crossdev" crossdev --stage1 --binutils <version> --gcc <version> --target <target>
#############

#############
48 port linux switches
#############
monitor-desktop udp listeners tcp listeners fixed size
#############
ssh enter ~ ? in order print list of escape characters
http://app.ln5.quiztionnaires.com
#############
-fstack-check=
-fstack-clash-protection=
#############

