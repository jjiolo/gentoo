#!/bin/sh
#############

#  should now only write to directory and just call it keyfs_create
# 
# 
usage(){ printf "%s\n" "no idea - ${1}";exit 1; }
#############
[ "${#}" == "1" ] || usage "no input"
[ -z "${1}" ] && usage "input empty"
#############
[ -b "${1}" ] || usage "partition does not exist"
[ -b "/dev/mapper/keyfs" ] || usage "block device already in use"
mountpoint -q "/storage/a.keyfs" && usage "mount point already in use"
#############
lsblk
unset prompt
until [[ "${prompt}" == "y" || "${prompt}" == "n" ]];do read -rp "about to nuke ${1} continue (y|n)? " prompt;done
[ "${prompt}" == "n" ] && usage "boom"
#############
read -rp 'passphrase > ' passphrase

uuid="$(head -c32 /dev/urandom|tee "${1}"|hexdump -n32 -ve '/1 "%02X"')"
printf "%s%s" "${uuid}" "${passphrase}"|cryptsetup --hash sha512 --cipher aes-cbc-essiv:sha256 --key-size 256 --offset 1 open --type plain "${1}" keyfs &&
mkfs.ext2 -FL keyfs "${1}" &&
mount -t ext2 -o rw,nodev,nosuid,noexec,noatime "${1}" "/storage/a.keyfs" &&
install -d -o root -g root -m 0755 "/storage/a.keyfs" || usage "!bail"
#############
install -d -o root -g root -m 0700 "/storage/a.keyfs"
install -d -o root -g root -m 0700 "/storage/a.keyfs/block"
install -d -o root -g root -m 0700 "/storage/a.keyfs/wg"
install -d -o root -g root -m 0700 "/storage/a.keyfs/openssh"
install -d -o root -g root -m 0700 "/storage/a.keyfs/openssl/.certs"
install    -o root -g root -m 0700 "/dev/null" "/storage/a.keyfs/openssl/.database"
install    -o root -g root -m 0700 "/dev/null" "/storage/a.keyfs/openssl/.serial"

printf "%s\n" "1234" > "${keyfs}/openssl/.serial"

#############
openssl genpkey -algorithm ec -pkeyopt ec_paramgen_curve:secp384r1 -pass stdin -aes-256-cbc -out "${keyfs}/encrypt"
printf "%s" "${passphrase}"|openssl ec -pubout -passin stdin -in "${keyfs}/encrypt" -out "${keyfs}/encrypt.pub"
printf "%s" "${passphrase}"|openssl genpkey -algorithm ec -pkeyopt ec_paramgen_curve:secp384r1 -pass stdin -aes-256-cbc -out "${keyfs}/sign"
printf "%s" "${passphrase}"|openssl ec -pubout -passin stdin -in "${keyfs}/sign" -out "${keyfs}/sign.pub"
unset passphrase
#############

ssh-keygen -t ed25519 -f /tmp/server -C "" -N ""
ephemeral="$(openssl genpkey -algorithm ec -pkeyopt ec_paramgen_curve:secp384r1)"
secret="$(printf "%s" "${ephemeral}"|openssl pkeyutl -derive -inkey /dev/stdin -peerkey "${keyfs}/encrypt.pub"|openssl sha384|cut -d ' ' -f2)"
printf "%s" "${ephemeral}"|openssl ec -pubout -in /dev/stdin -out "${keyfs}/openssh/server.key"
openssl enc -e -base64 -salt -md sha512 -aes-256-cbc -iv "${secret:64:32}" -K "${secret:0:64}" -in /tmp/server -out "${keyfs}/openssh/server.enc"
printf "%s\n" "@cert-authority * $(ssh-keygen -yf /tmp/server)" > "${keyfs}/openssh/server.pub"
rm /tmp/server /tmp/server.pub

ssh-keygen -t ed25519 -f /tmp/client -C "" -N ""
ephemeral="$(openssl genpkey -algorithm ec -pkeyopt ec_paramgen_curve:secp384r1)"
secret="$(printf "%s" "${ephemeral}"|openssl pkeyutl -derive -inkey /dev/stdin -peerkey "${keyfs}/encrypt.pub"|openssl sha384|cut -d ' ' -f2)"
printf "%s" "${ephemeral}"|openssl ec -pubout -in /dev/stdin -out "${keyfs}/openssh/client.key"
openssl enc -e -base64 -salt -md sha512 -aes-256-cbc -iv "${secret:64:32}" -K "${secret:0:64}" -in /tmp/client -out "${keyfs}/openssh/client.enc"
cp /tmp/client.pub "${keyfs}/openssh/client.pub"
rm /tmp/client /tmp/client.pub

#############

openssl genpkey -algorithm ec -pkeyopt ec_paramgen_curve:secp384r1 -out /tmp/server
openssl req -new -x509 -config "/etc/ssl/openssl.cnf" -extensions root_extension -days 365 -sha512 -key /tmp/server -out "${keyfs}/openssl/server.crt" -subj "/CN=server"
ephemeral="$(openssl genpkey -algorithm ec -pkeyopt ec_paramgen_curve:secp384r1)"
secret="$(printf "%s" "${ephemeral}"|openssl pkeyutl -derive -inkey /dev/stdin -peerkey "${keyfs}/encrypt.pub"|openssl sha384|cut -d ' ' -f2)"
printf "%s" "${ephemeral}"|openssl ec -pubout -in /dev/stdin -out "${keyfs}/openssl/server.key"
openssl enc -e -base64 -salt -md sha512 -aes-256-cbc -iv "${secret:64:32}" -K "${secret:0:64}" -in /tmp/server -out "${keyfs}/openssl/server.enc"
rm /tmp/server

openssl genpkey -algorithm ec -pkeyopt ec_paramgen_curve:secp384r1 -out /tmp/client
openssl req -new -x509 -config "/etc/ssl/openssl.cnf" -extensions root_extension -days 365 -sha512 -key /tmp/client -out "${keyfs}/openssl/client.crt" -subj "/CN=client"
ephemeral="$(openssl genpkey -algorithm ec -pkeyopt ec_paramgen_curve:secp384r1)"
secret="$(printf "%s" "${ephemeral}"|openssl pkeyutl -derive -inkey /dev/stdin -peerkey "${keyfs}/encrypt.pub"|openssl sha384|cut -d ' ' -f2)"
printf "%s" "${ephemeral}"|openssl ec -pubout -in /dev/stdin -out "${keyfs}/openssl/client.key"
openssl enc -e -base64 -salt -md sha512 -aes-256-cbc -iv "${secret:64:32}" -K "${secret:0:64}" -in /tmp/client -out "${keyfs}/openssl/client.enc"
rm /tmp/client

#############
umount "${keyfs}"

