#!/bin/sh
#############
. variables
#############
usage() { printf "\n${0} - ${1}\n-a accept\n-c connect\n-f file\n\n";exit; }
#############
while getopts "s:a:c:f:" arg;do
 case "${arg}" in
  a)accept="${OPTARG}";;
  c)connect="${OPTARG}";;
  f)file="${OTPARG}";;
 esac
done
#############
[[ -z "${accept}"  ]] && usage "requires accept address:port"
[[ -z "${connect}" ]] && usage "requires connect address:port"
[[ -f "${tmp_pem}" ]] || usage "requires tmp.pem"
[[ -f "${tmp_crt}" ]] || usage "requires tmp.crt"
contact_variables self
contact_verify||usage "${debug}"
#############
if [[ ! -z "${file}" ]];then contact_variables "${file}";contact_verify||usage "${debug}";fi
#############
service="$(date|openssl sha512|tail -n13)"
#############
if [[ -z "${file}" ]];then
stunnel -fd 0 << EOF
[server]
accept = ${accept}
connect = ${connect}
key = ${tmp_pem}
cert = ${tmp_crt}
CApath = ${whitelist}
requireCert = yes
verifyChain = yes
verifyPeer = no
sslVersion = TLSv1.2
ciphers = ECDHE-ECDSA-AES256-GCM-SHA384
curve = secp521r1
EOF
else
stunnel -fd 0 << EOF
[client]
client = yes
accept = ${accept}
connect = ${connect}
key = ${tmp_pem}
cert = ${tmp_crt}
CAfile = ${keyring}/${contact}/chain
requireCert = yes
verifyChain = yes
verifyPeer = no
sslVersion = TLSv1.2
ciphers = ECDHE-ECDSA-AES256-GCM-SHA384
curve = secp521r1
EOF
fi
#############
