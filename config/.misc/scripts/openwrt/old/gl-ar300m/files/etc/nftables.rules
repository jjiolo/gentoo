#############
flush ruleset
#############
#table netdev interfaces {
#
# set blacklist4 { type ipv4_addr;flags interval,timeout; }
# set blacklist6 { type ipv6_addr;flags interval,timeout; }
#
# chain filter_eth0 {
#
#   type filter hook ingress device eth0 priority 0
#
#   policy accept
#
#   ip  saddr @blacklist4 drop
#   ip6 saddr @blacklist6 drop
#
#  }
#}
#############
table arp filter {
 chain input  { type filter hook input  priority 0;policy accept; } # log flags skuid prefix "arp.input: "; }
 chain output { type filter hook output priority 0;policy accept; } # log flags skuid prefix "arp.output: "; }
}
#############
table bridge filter {
 chain forward { type filter hook forward priority 0;policy drop; }
 chain input   { type filter hook input   priority 0;policy drop; }
 chain output  { type filter hook output  priority 0;policy drop; }
}
#############
table ip nat {
 chain prerouting  { type nat hook prerouting  priority 0;policy accept; }
 chain input       { type nat hook input       priority 0;policy accept; }
 chain output      { type nat hook output      priority 0;policy accept; }
 chain postrouting { type nat hook postrouting priority 0;policy accept;oif eth0 masquerade fully-random; }
}
#############
table ip6 nat {
 chain prerouting  { type nat hook prerouting  priority 0;policy accept; }
 chain input       { type nat hook input       priority 0;policy accept; }
 chain output      { type nat hook output      priority 0;policy accept; }
 chain postrouting { type nat hook postrouting priority 0;policy accept;oif eth0 masquerade fully-random; }
}
#############
table inet filter {
#############
chain forward {

  # chain
  type filter hook forward priority 0
  # policy
  policy drop;
  # drop
  iif wlan0 ip daddr 192.168.0.0/24 log flags skuid prefix "forward.drop: "
  iif eth0  ip saddr 192.168.0.0/24 log flags skuid prefix "forward.drop: "
  # limit
  # meter4
  oif eth0 meter forward4     { ip  saddr . ip  daddr             timeout 1h counter }
  oif eth0 meter forward4.udp { ip  saddr . ip  daddr . udp dport timeout 1h counter }
  oif eth0 meter forward4.tcp { ip  saddr . ip  daddr . tcp dport timeout 1h counter }
  # meter6
  oif eth0 meter forward6     { ip6 saddr . ip6 daddr             timeout 1h counter }
  oif eth0 meter forward6.udp { ip6 saddr . ip6 daddr . udp dport timeout 1h counter }
  oif eth0 meter forward6.tcp { ip6 saddr . ip6 daddr . tcp dport timeout 1h counter }
  # filter4
  ip protocol icmp drop
  ip protocol udp iif wlan0 ip saddr 192.168.1.88/32 oif eth0 ip daddr 0.0.0.0/0 ct state invalid log flags skuid prefix "forward.lan.udp.invalid: " drop
  ip protocol udp iif wlan0 ip saddr 192.168.1.88/32 oif eth0 ip daddr 0.0.0.0/0 ct state new log flags skuid prefix "forward.lan.udp.new: " accept
  ip protocol udp iif wlan0 ip saddr 192.168.1.88/32 oif eth0 ip daddr 0.0.0.0/0 ct state established accept
  ip protocol udp iif eth0 ip saddr 0.0.0.0/0 oif wlan0 ip daddr 192.168.1.88/32 ct state established accept
  ip protocol tcp iif wlan0 ip saddr 192.168.1.0/24 oif eth0 ip daddr 0.0.0.0/0 ct state invalid log flags skuid prefix "forward.lan.tcp.invalid: "
  ip protocol tcp iif wlan0 ip saddr 192.168.1.0/24 oif eth0 ip daddr 0.0.0.0/0 ct state new log flags skuid prefix "forward.lan.tcp.new: " accept
  ip protocol tcp iif wlan0 ip saddr 192.168.1.0/24 oif eth0 ip daddr 0.0.0.0/0 ct state established accept
  ip protocol tcp iif eth0 ip saddr 0.0.0.0/0 oif wlan0 ip daddr 192.168.1.0/24 ct state established accept
  # filter6
  ip6 nexthdr icmpv6 drop
 #ip6 nexthdr udp iif wlan0 ip6 saddr fd01::/64 oif eth0 ip6 daddr ::/0 ct state invalid log flags skuid prefix "forward.lan.udp.invalid: " drop
 #ip6 nexthdr udp iif wlan0 ip6 saddr fd01::/64 oif eth0 ip6 daddr ::/0 ct state new log flags skuid prefix "forward.lan.udp.new: " accept
 #ip6 nexthdr udp iif wlan0 ip6 saddr fd01::/64 oif eth0 ip6 daddr ::/0 ct state established accept
 #ip6 nexthdr udp iif eth0 ip6 saddr ::/0 oif wlan0 ip6 daddr fd01::/64 ct state established accept
  ip6 nexthdr tcp iif wlan0 ip6 saddr fd01::/64 oif eth0 ip6 daddr ::/0 ct state invalid log flags skuid prefix "forward.lan.tcp.invalid: " drop
  ip6 nexthdr tcp iif wlan0 ip6 saddr fd01::/64 oif eth0 ip6 daddr ::/0 ct state new log flags skuid prefix "forward.lan.tcp.new: " accept
  ip6 nexthdr tcp iif wlan0 ip6 saddr fd01::/64 oif eth0 ip6 daddr ::/0 ct state established accept
  ip6 nexthdr tcp iif eth0 ip6 saddr ::/0 oif wlan0 ip6 daddr fd01::/64 ct state established accept
  # drop
  log flags skuid prefix "drop.forward: "

 }
#############
chain input {

  # chain
  type filter hook input priority 0
  # policy
  policy drop
  # drop
  iif lo drop
  # limit
  # meter4
  ct state established meter input4 { ip saddr timeout 1h counter }
  udp dport != {32768-60999} ct state established meter input4.service.udp { ip saddr . udp dport timeout 1h counter }
  tcp dport != {32768-60999} ct state established meter input4.service.tcp { ip saddr . tcp dport timeout 1h counter }
  udp dport    {32768-60999} ct state established meter input4.user.udp    { ip saddr . udp sport timeout 1h counter }
  tcp dport    {32768-60999} ct state established meter input4.user.tcp    { ip saddr . tcp sport timeout 1h counter }
  # meter6
  ct state established meter input6 { ip6 saddr timeout 1h counter }
  udp dport != {32768-60999} ct state established meter input6.service.udp { ip6 saddr . udp dport timeout 1h counter }
  tcp dport != {32768-60999} ct state established meter input6.service.tcp { ip6 saddr . tcp dport timeout 1h counter }
  udp dport    {32768-60999} ct state established meter input6.user.udp    { ip6 saddr . udp sport timeout 1h counter }
  tcp dport    {32768-60999} ct state established meter input6.user.tcp    { ip6 saddr . tcp sport timeout 1h counter }
  # filter4
  ip protocol icmp log flags skuid prefix "icmp.input: " accept
  ip protocol udp iif wlan0 ip saddr 0.0.0.0 udp sport 68 ip daddr 255.255.255.255 udp dport 67 goto iludp
  ip protocol udp iif eth1  ip saddr 0.0.0.0 udp sport 68 ip daddr 255.255.255.255 udp dport 67 goto imudp
  ip protocol udp iif wlan0 ip saddr 192.168.1.0/24 ip daddr 192.168.1.1/32   goto iludp
  ip protocol tcp iif wlan0 ip saddr 192.168.1.0/24 ip daddr 192.168.1.1/32   goto iltcp
  ip protocol udp iif eth0  ip saddr 0.0.0.0/0      ip daddr 192.168.0.197/32 goto iwudp
  ip protocol tcp iif eth0  ip saddr 0.0.0.0/0      ip daddr 192.168.0.197/32 goto iwtcp
  ip protocol udp iif eth1  ip saddr 192.168.3.0/24 ip daddr 192.168.3.1/32   goto imudp
  ip protocol tcp iif eth1  ip saddr 192.168.3.0/24 ip daddr 192.168.3.1/32   goto imtcp
  # filter6
  ip6 nexthdr icmpv6 log flags skuid prefix "icmp.input: " accept
  ip6 nexthdr udp iif wlan0 ip6 saddr fd01::/64 ip6 daddr fd01::1/128 goto iludp
  ip6 nexthdr tcp iif wlan0 ip6 saddr fd01::/64 ip6 daddr fd01::1/128 goto iltcp
  ip6 nexthdr udp iif eth0  ip6 saddr ::/0      ip6 daddr ::/0        goto iwudp
  ip6 nexthdr tcp iif eth0  ip6 saddr ::/0      ip6 daddr ::/0        goto iwtcp
  ip6 nexthdr udp iif eth1  ip6 saddr fd03::/64 ip6 daddr fd03::1/128 goto imudp
  ip6 nexthdr tcp iif eth1  ip6 saddr fd03::/64 ip6 daddr fd03::1/128 goto imtcp
  # drop
  log flags skuid prefix "drop.input: " drop

 }
#############
chain output {

  # chain
  type filter hook output priority 0
  # policy
  policy drop
  # drop
  iif lo drop
  # limit
  # meter4
  ct state established meter output4 { ip daddr timeout 1h counter }
  udp sport != {32768-60999} ct state established meter output4.service.udp { skuid . ip daddr . udp sport timeout 1h counter }
  tcp sport != {32768-60999} ct state established meter output4.service.tcp { skuid . ip daddr . tcp sport timeout 1h counter }
  udp sport    {32768-60999} ct state established meter output4.user.udp    { skuid . ip daddr . udp dport timeout 1h counter }
  tcp sport    {32768-60999} ct state established meter output4.user.tcp    { skuid . ip daddr . tcp dport timeout 1h counter }
  # meter6
  ct state established meter output6 { ip6 daddr timeout 1h counter }
  udp sport != {32768-60999} ct state established meter output6.service.udp { skuid . ip6 daddr . udp sport timeout 1h counter }
  tcp sport != {32768-60999} ct state established meter output6.service.tcp { skuid . ip6 daddr . tcp sport timeout 1h counter }
  udp sport    {32768-60999} ct state established meter output6.user.udp    { skuid . ip6 daddr . udp dport timeout 1h counter }
  tcp sport    {32768-60999} ct state established meter output6.user.tcp    { skuid . ip6 daddr . tcp dport timeout 1h counter }
  # filter4
  ip protocol icmp log flags skuid prefix "icmp.output: " accept
  ip protocol udp oif wlan0 ip saddr 192.168.1.1/32   ip daddr 192.168.1.0/24 goto oludp
  ip protocol tcp oif wlan0 ip saddr 192.168.1.1/32   ip daddr 192.168.1.0/24 goto oltcp
  ip protocol udp oif eth0  ip saddr 192.168.0.197/32 ip daddr 0.0.0.0/0      goto owudp
  ip protocol tcp oif eth0  ip saddr 192.168.0.197/32 ip daddr 0.0.0.0/0      goto owtcp
  ip protocol udp oif eth1  ip saddr 192.168.3.1/32   ip daddr 192.168.3.0/24 goto omudp
  ip protocol tcp oif eth1  ip saddr 192.168.3.1/32   ip daddr 192.168.3.0/24 goto omtcp
  # filter6
  ip6 nexthdr icmpv6 log flags skuid prefix "icmp.output: " accept
  ip6 nexthdr udp oif wlan0 ip6 saddr fd01::1/128 ip6 daddr fd01::/64 goto oludp
  ip6 nexthdr tcp oif wlan0 ip6 saddr fd01::1/128 ip6 daddr fd01::/64 goto oltcp
  ip6 nexthdr udp oif eth0  ip6 saddr ::/0        ip6 daddr ::/0      goto owudp
  ip6 nexthdr tcp oif eth0  ip6 saddr ::/0        ip6 daddr ::/0      goto owtcp
  ip6 nexthdr udp oif eth1  ip6 saddr fd03::1/128 ip6 daddr fd03::/64 goto omudp
  ip6 nexthdr tcp oif eth1  ip6 saddr fd03::1/128 ip6 daddr fd03::/64 goto omtcp
  log flags skuid prefix "output.drop: " drop

 }
#############
chain iludp {
 # invalid
 ct state invalid log flags skuid prefix "input.lan.udp.invalid: " drop
 # service new
 udp dport {53,67,123} ct state new log flags skuid prefix "input.lan.udp.new: " accept
 # service established
 udp dport {53,67,123} ct state established accept
 # user established
 # dropped
 log flags skuid prefix "input.lan.udp.drop: " drop
}
#############
chain iltcp {
 # invalid
 ct state invalid log flags skuid prefix "input.lan.tcp.invalid: " drop
 # service new
 # service established
 # user established
 # dropped
 log flags skuid prefix "input.lan.tcp.drop: " drop
}
#############
chain oludp {
 # invalid
 ct state invalid log flags skuid prefix "output.lan.udp.invalid: " drop
 # service established
 udp sport {53}  ct state established accept
 udp sport {123} ct state established accept
 # user new
 # user established
 # dropped
 log flags skuid prefix "output.lan.udp.drop: " drop
}
#############
chain oltcp {
 # invalid
 ct state invalid log flags skuid prefix "output.lan.tcp.invalid: " drop
 # service established
 # user new
 # user established
 # dropped
 log flags skuid prefix "output.lan.tcp.drop: " drop
}
#############
chain iwudp {
 # invalid
 ct state invalid log flags skuid prefix "input.wan.udp.invalid: " drop
 # service new
 # service established
 # user established
 udp sport {53,123} ct state established accept
 # dropped
 log flags skuid prefix "input.wan.udp.drop: " drop
}
#############
chain iwtcp {
 # invalid
 ct state invalid log flags skuid prefix "input.wan.tcp.invalid: " drop
 # service new
 # service established
 # user established
 tcp sport {443} ct state established accept
 # dropped
 log flags skuid prefix "input.wan.tcp.drop: " drop
}
#############
chain owudp {
 # invalid
 ct state invalid log flags skuid prefix "output.wan.udp.invalid: " drop
 # service established
 # user new
 udp dport {53}  ct state new log flags skuid prefix "output.wan.udp.new: " accept
 udp dport {123} ct state new log flags skuid prefix "output.wan.udp.new: " accept
 # user established
 udp dport {53}  ct state established accept
 udp dport {123} ct state established accept
 # dropped
 log flags skuid prefix "output.wan.udp.drop: " drop
}
#############
chain owtcp {
 # invalid
 ct state invalid log flags skuid prefix "output.wan.tcp.invalid: " drop
 # service established
 # user new
 tcp dport {443} ct state new log flags skuid prefix "output.wan.tcp.new: " accept
 # user established
 tcp dport {443} ct state established accept
 # dropped
 log flags skuid prefix "output.wan.tcp.drop: " drop
}
#############
chain imudp {
 # invalid
 ct state invalid log flags skuid prefix "input.man.udp.invalid: " drop
 # service new
 # service established
 # user established
 # dropped
 log flags skuid prefix "input.man.udp.drop: " drop
}
#############
chain imtcp {
 # invalid
 ct state invalid log flags skuid prefix "input.man.tcp.invalid: " drop
 # service new
 tcp dport {23} ct state new log flags skuid prefix "input.man.tcp.new: " accept
 # service established
 tcp dport {23} ct state established accept
 # user established
 # dropped
 log flags skuid prefix "input.man.tcp.drop: " drop
}
#############
chain omudp {
 # invalid
 ct state invalid log flags skuid prefix "output.man.udp.invalid: " drop
 # service established
 # user new
 # user established
 # dropped
 log flags skuid prefix "output.man.udp.drop: " drop
}
#############
chain omtcp {
 # invalid
 ct state invalid log flags skuid prefix "output.man.tcp.invalid: " drop
 # service established
 tcp sport {23} ct state established accept
 # user new
 # user established
 # dropped
 log flags skuid prefix "output.man.tcp.drop: " drop
}
#############
}
#############
