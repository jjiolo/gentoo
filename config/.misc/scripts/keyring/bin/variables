#!/bin/sh
#############
  red="\033[31m"
green="\033[32m"
reset="\033[0m"

#############
path="${HOME}/keyring"

#############
curve="brainpoolP512r1"

#############
openssl="${path}/openssl"

#############
   certs="${path}/.certs"
database="${path}/.database"
  serial="${path}/.serial"

#############
private="${path}/private"
      root_pem="${private}/root.pem"
persistent_pem="${private}/persistent.pem"
       tmp_pem="${private}/tmp.pem"

#############
persistent_csr="${certs}/persistent.csr"
       tmp_csr="${certs}/tmp.csr"

#############
contacts="${path}/contacts"
 self="${contacts}/self"
  root_sig="${self}/root.sig"
  root_crt="${self}/root.crt"
  persistent_crt="${self}/persistent.crt"
  chain="${self}/chain"
  checksum="${self}/checksum"
  revoke="${self}/revoke"
  tmp_crt="${self}/tmp.crt"

#############
permissions_directory="${USER}$(id -gn)700"
permissions_file="${USER}$(id -gn)600"
expire="3600"

#############
public_key="/tmp/public.key"
passphrase_root="/tmp/passhrase.root"
passphrase_persistent="/tmp/passphrase.persistent"

#############
contact_variables(){ contact_name="${1}"
contact_directory="${contacts}/${contact_name}"
contact_sig="${contact_directory}/root.sig"
contact_root="${contact_directory}/root.crt"
contact_persistent="${contact_directory}/persistent.crt"
contact_chain="${contact_directory}/chain"
contact_checksum="${contact_directory}/checksum"
contact_tmp="${contact_directory}/tmp.crt"
contact_revoke="${contact_directory}/revoke"
debug="${contact_name}"; }

#############
passphrase_root(){ read -rp 'enter root passphrase: ' root
printf "%s" "${root}"|openssl ec -in "${root_pem}" -passin stdin -out /dev/null || usage "incorrect root passphrase"
printf "%s" "${root}" > "${passphrase_root}"
unset root; }

#############
passphrase_persistent(){ read -rp 'enter persistent passphrase: ' persistent
printf "%s" "${persistent}"|openssl ec -in "${persistent_pem}" -passin stdin -out /dev/null || usage "incorrect persistent passphrase"
printf "%s" "${persistent}" > "${passphrase_persistent}"
unset persistent; }

#############
contact_verify(){
#############
if [[ -f "${persistent_crt}" && -f "${contact_root}" && -f "${contact_persistent}" && -f "${contact_chain}" && -f "${contact_checksum}" && -d "${contact_revoke}" ]];then
#############
[[ "$(stat -c %U%G%a "${contacts}")"           == "${permissions_directory}" ]]||debug="${debug}:contacts_permissions"
[[ "$(stat -c %U%G%a "${contact_directory}")"  == "${permissions_directory}" ]]||debug="${debug}:directory_permissions"
[[ "$(stat -c %U%G%a "${contact_revoke}")"     == "${permissions_directory}" ]]||debug="${debug}:revoke_permissions"
[[ "$(stat -c %U%G%a "${contact_root}")"       == "${permissions_file}"      ]]||debug="${debug}:root_permissions"
[[ "$(stat -c %U%G%a "${contact_persistent}")" == "${permissions_file}"      ]]||debug="${debug}:persistent_permissions"
[[ "$(stat -c %U%G%a "${contact_chain}")"      == "${permissions_file}"      ]]||debug="${debug}:chain_permissions"
[[ "$(stat -c %U%G%a "${contact_checksum}")"   == "${permissions_file}"      ]]||debug="${debug}:checksum_permissions"
#############
openssl x509 -in "${persistent_crt}" -noout -pubkey > "${public_key}" 2>/dev/null
cd "${contact_directory}" && openssl sha512 root.crt persistent.crt chain|openssl dgst -sha512 -verify "${public_key}" -signature checksum &>/dev/null || debug="${debug}:unsigned"
cd - &>/dev/null
#############
openssl verify -CAfile "${contact_root}" "${contact_root}" &>/dev/null || debug="${debug}:root_invalid"
openssl x509 -checkend "${expire}" -noout -in "${contact_root}" &>/dev/null || debug="${debug}:root_expired"
#############
openssl verify -CAfile "${contact_root}" "${contact_persistent}" &>/dev/null || debug="${debug}:persistent_invalid"
openssl x509 -checkend "${expire}" -noout -in "${contact_persistent}" &>/dev/null || debug="${debug}:persistent_expired"
#############
[[ -f "${contact_tmp}" ]] && {
openssl verify -CAfile "${contact_chain}" "${contact_tmp}" &>/dev/null || debug="${debug}:tmp_invalid"
openssl x509 -checkend "${expire}" -noout -in "${contact_tmp}" &>/dev/null || debug="${debug}:tmp_expired"; }
#############
else debug="${debug}:incomplete";fi
#############
[[ "${debug}" == "${contact_name}" ]] && return 0 || return 1; }
#############

