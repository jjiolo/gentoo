#!/bin/sh
#############
. variables

#############
usage(){ printf "\n${0} - ${1}\n-c contact\n-h help\n\n";exit; }

#############
while getopts "c:h" arg;do
 case "${arg}" in
  c) contact="${OPTARG}";;
  h) usage "print contacts information";;
  *) usage "print contacts information";;
 esac
done

#############
contact_info(){
printf "############# # "
[[ "$(stat -c %U%G%a "${contacts}"          2>/dev/null)" == "${permissions_directory}" ]] && printf "[${green}contacts:${reset}"       || printf "[${red}contacts:${reset}"
[[ "$(stat -c %U%G%a "${contact_directory}" 2>/dev/null)" == "${permissions_directory}" ]] && printf "${green}${contact_name}:${reset}" || printf "${red}${contact_name}:${reset}"
[[ "$(stat -c %U%G%a "${contact_revoke}"    2>/dev/null)" == "${permissions_directory}" ]] && printf "${green}revoke${reset}]"          || printf "${red}revoke${reset}]"
[[ "$(stat -c %U%G%a "${contact_chain}"     2>/dev/null)" == "${permissions_file}"      ]] && printf "[${green}chain:${reset}"          || printf "[${red}chain:${reset}"
[[ "$(stat -c %U%G%a "${contact_checksum}"  2>/dev/null)" == "${permissions_file}"      ]] && printf "${green}checksum${reset}]"        || printf "${red}checksum${reset}]"
openssl x509 -in "${persistent_crt}" -noout -pubkey > "${public_key}" 2>/dev/null
cd "${contact_directory}" && openssl sha512 root.crt persistent.crt chain 2>/dev/null|openssl dgst -sha512 -verify "${public_key}" -signature checksum &>/dev/null && printf "[${green}signed${reset}]" || printf "[${red}unsigned${reset}]"
printf "\n\n"; }

#############
contact_revoke(){ if [[ ! -z "$(ls "${contact_revoke}" 2>/dev/null)" ]];then for i in "${contact_revoke}"/*.crt;do
 certificate="${i}";signature="${certificate%%.crt}.sig";[[ -f "${signature}" ]] || continue
 openssl verify -CAfile "${contact_root}"  "${certificate}" &>/dev/null && certificate_info "${certificate}" "         p" "${contact_root}"       "${signature}" && continue
 openssl verify -CAfile "${contact_chain}" "${certificate}" &>/dev/null && certificate_info "${certificate}" "         t" "${contact_persistent}" "${signature}" || rm "${certificate}" "${signature}"
done;fi; }

#############
certificate_info(){ unset permissions fingerprint verify expire #1=certificate,2=name,3=cafile,4=signature
[[ "$(stat -c %U%G%a "${1}")" == "${permissions_file}" ]] && permissions="${green}${2}${reset}" || permissions="${red}${2}${reset}"
fingerprint="$(openssl x509 -in "${1}" -noout -fingerprint -sha1|cut -d "=" -f "2"|tr -d ":")"
if [[ -z "${4}" ]];then verify="$(openssl verify -CAfile "${3}" "${1}" &>/dev/null && printf "${green}valid${reset}" || printf "${red}invalid${reset}")"
elif [[ ! -z "${4}" ]];then openssl x509 -in "${3}" -noout -pubkey > "${public_key}" 2>/dev/null
verify="$(openssl dgst -sha512 -verify "${public_key}" -signature "${4}" "${1}" &>/dev/null && printf "${green}valid${reset}" || printf "${red}invalid${reset}")";fi
expire="$(($(date --date="$(openssl x509 -in "${1}" -noout -enddate|cut -d "=" -f "2"|head -c "-5" )" +%s)-$(date +%s)))"
[[ "${expire}" -gt "0" ]] && expire="${green}${expire}${reset}" || { rm "${1}";return; }
printf "[${permissions}][${fingerprint}][${verify}][${expire}]\n"; }

#############
contact(){ contact_variables "${1}"
############# full
if [[ -f "${contact_root}" && -f "${contact_persistent}" && -f "${contact_chain}" && -f "${contact_checksum}" && -d "${contact_revoke}" && -f "${contact_tmp}" ]];then
 contact_info
 certificate_info "${contact_root}"       "      root" "${contact_root}"
 certificate_info "${contact_persistent}" "persistent" "${contact_root}"
 certificate_info "${contact_tmp}"        "       tmp" "${contact_chain}"
 contact_revoke
############# signed
elif [[ -f "${contact_root}" && -f "${contact_persistent}" && -f "${contact_chain}" && -f "${contact_checksum}" && -d "${contact_revoke}" && ! -f "${contact_tmp}" ]];then
 contact_info
 certificate_info "${contact_root}"       "      root" "${contact_root}"
 certificate_info "${contact_persistent}" "persistent" "${contact_root}"
 contact_revoke
############# unsigned
elif [[ -f "${contact_root}" && -f "${contact_persistent}" && ! -f "${contact_chain}" && ! -f "${contact_checksum}" && -d "${contact_revoke}" && ! -f "${contact_tmp}" ]];then
 printf "%s\n" "unsigned"
 contact_info
 certificate_info "${contact_root}"       "      root" "${contact_root}"
 certificate_info "${contact_persistent}" "persistent" "${contact_root}"
 contact_revoke
############# revoked root
elif [[ -f "${contact_root}" && -f "${contact_sig}" ]];then
 contact_info
 signature_info "${contact_root}" "   revoked" "${contact_root}" "${contact_sig}"
############# revoked persistent
elif [[ -f "${contact_root}" && ! -f "${contact_persistent}" && ! -f "${contact_chain}" && ! -f "${contact_checksum}" && -d "${contact_revoke}" && ! -f "${contact_tmp}" ]];then
 contact_info
 certificate_info "${contact_root}" "      root" "${contact_root}"
 contact_revoke
############# unknown_state
else contact_info;printf "${red}%s\n${reset}" "[unknown_state]";fi
#############
printf "\n"; }

#############
[[ -f "${persistent_crt}" ]] || { printf "${red}%s\n${reset}" "persistent.crt signing key missing... keyring corrupt";exit; }
[[ -z "${contact}" ]] && for i in "${contacts}"/*;do contact "$(basename "${i}")";done || contact "${contact}" 

