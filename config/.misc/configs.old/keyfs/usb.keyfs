#!/bin/sh
#############
usage(){ printf "%s\n" "takes ip and hostname - ${1}";exit 1; }
#############

############# keyfs/bootfs

 install -d -o root -g root -m 0700 "${keyfs}" "${keyfs}/gnupg" "${keyfs}/public" "${keyfs}/private" "${keyfs}/.certs"

 install -d -o root -g root -m 0700 "${bootfs}" "${bootfs}/public" "${bootfs}/private" "${bootfs}/.certs"

 [ -f "${keyfs}/.database" ] || install -o root -g root -m 0600 "/dev/null" "${keyfs}/.database"
 [ -f "${keyfs}/.serial" ] || printf "%s\n" "1234" > "${keyfs}/.serial"
 [ -f "${keyfs}/.rand" ] || dd if=/dev/random of=${keyfs}/.rand bs=4096 count=1

 [ -f "${bootfs}/.database" ] || install -o root -g root -m 0600 "/dev/null" "${bootfs}/.database"
 [ -f "${bootfs}/.serial" ] || printf "%s\n" "1234" > "${bootfs}/.serial"
 [ -f "${bootfs}/.rand" ] || dd if=/dev/random of=${keyfs}/.rand bs=4096 count=1

#############

#############

 [ -f "${keyfs}/secureboot" ] || openssl req -x509 -new -newkey rsa:2048 -sha256 -days 365 -nodes -outform der -keyout "${keyfs}/private/secureboot" -out "${keyfs}/public/secureboot" -subj '/CN=secureboot'

 install -o root -g root -m 0644 "${keyfs}/public/secureboot" "${bootfs}/public/secureboot"

#############

#############

cat > "${keyfs}/gnupg/gpg.conf" << EOF

verbose
display-charset utf-8
charset utf-8
require-cross-certification
armor
no-greeting
no-emit-version
no-comments
default-recipient-self
keyid-format long
with-fingerprint
list-options show-uid-validity
verify-options show-uid-validity
enable-large-rsa
personal-cipher-preferences AES256 AES192 AES
personal-digest-preferences SHA512 SHA384 SHA256 SHA224
personal-compress-preferences ZLIB Uncompressed
cert-digest-algo SHA512
default-preference-list SHA512 SHA384 SHA256 AES256 AES192 AES ZLIB Uncompressed

EOF

cat > "${keyfs}/gnupg/gpg-agent.conf" << EOF

batch
verbose

EOF

cat > "${keyfs}/gnupg/dirmngr.conf" << EOF

batch
verbose
no-use-tor

keyserver hkps://hkps.pool.sks-keyservers.net
hkp-cacert /usr/share/gnupg/sks-keyservers.netCA.pem

EOF

 [ -f "${keyfs}/gnupg/pubring.kbx" ] || printf "9\n1\n0\nroot\n\n\n"|gpg --homedir "${keyfs}/gnupg" --no-tty --expert --full-generate-key --allow-freeform-uid --command-fd /dev/stdin --pinentry-mode loopback --passphrase ''

 gpg --homedir "${keyfs}/gnupg" --export root > "${keyfs}/public/public.key"
 gpg --homedir "${keyfs}/gnupg" --export root > "${bootfs}/public/public.key"

#############

#############

 [ -f "${keyfs}/private/sshd"     ] || ssh-keygen -t ed25519 -f "${keyfs}/private/sshd" -C "" -N ""
 [ -f "${keyfs}/private/sshd.pub" ] && rm -rf "${keyfs}/private/sshd.pub"
 ssh-keygen -yf "${keyfs}/private/sshd"|sed 's/^/@cert-authority * /' > "${keyfs}/public/sshd"
 ssh-keygen -yf "${keyfs}/private/sshd"|sed 's/^/@cert-authority * /' > "${bootfs}/public/sshd"

 [ -f "${keyfs}/private/ssh"     ] || ssh-keygen -t ed25519 -f "${keyfs}/private/ssh" -C "" -N ""
 [ -f "${keyfs}/private/ssh.pub" ] && rm -rf "${keyfs}/private/ssh.pub"
 ssh-keygen -yf "${keyfs}/private/ssh" > "${keyfs}/public/ssh"
 ssh-keygen -yf "${keyfs}/private/ssh" > "${bootfs}/public/ssh"

#############

#############

 [ -f "${keyfs}/private/ssld"    ] || openssl genpkey -algorithm ed25519 -out "${keyfs}/private/ssld"
 [ -f "${keyfs}/public/ssld.crt" ] ||
 openssl req -new -x509 -config /etc/ssl/openssl.cnf -extensions keyfs_extension -days 365 -sha512 -key "${keyfs}/private/ssld" -out "${keyfs}/public/ssld.crt" -subj '/CN=keyfs'

 [ -f "${keyfs}/private/ssl"    ] || openssl genpkey -algorithm ed25519 -out "${keyfs}/private/ssl"
 [ -f "${keyfs}/public/ssl.crt" ] ||
 openssl req -new -x509 -config /etc/ssl/openssl.cnf -extensions keyfs_extension -days 365 -sha512 -key "${keyfs}/private/ssl"  -out "${bootfs}/public/ssl.crt"  -subj '/CN=keyfs'

#############

 [ -f "${bootfs}/private/ssld"    ] || openssl genpkey -algorithm ed25519 -out "${bootfs}/private/ssld"
 [ -f "${bootfs}/public/ssld.csr" ] ||
 openssl req -new -config "/etc/ssl/openssl.cnf" -extensions bootfs_extension -sha512 -key "${bootfs}/private/ssld" -out "${bootfs}/public/ssld.csr" -subj "/CN=bootfs"
 openssl ca -batch -config "/etc/ssl/openssl.cnf" -name ssld_keyfs -extensions bootfs_extension -policy certificate_policy -days "30" -sha512 -in "${bootfs}/public/ssld.csr" -out "${bootfs}/public/ssld.crt"
#openssl ca -batch -config "/etc/ssl/openssl.cnf" -name ssld_bootfs -extensions storage_extension -policy certificate_policy -days "30" -sha512 -in "${public}/ssld.csr" -out "${public}/ssld.crt"

 cat "${keyfs}/public/ssld 

 [ -f "${bootfs}/private/ssl"    ] || openssl genpkey -algorithm ed25519 -out "${bootfs}/private/ssl"
 [ -f "${bootfs}/public/ssl.csr" ] ||
 openssl req -new -config "/etc/ssl/openssl.cnf" -extensions bootfs_extension -sha512 -key "${bootfs}/private/ssld" -out "${bootfs}/public/ssld.csr" -subj '/CN=bootfs'
 openssl ca -batch -config "/etc/ssl/openssl.cnf" -name ssl_keyfs -extension bootfs_extension -policy certificate_policy -days "30" -sha512 -in "${bootfs}/public/ssl.csr" -out "${bootfs}/public/ssl.crt"
#openssl ca -batch -config "/etc/ssl/openssl.cnf" -name ssl_bootfs -extensions storage_extension -policy certificate_policy -days "30" -sha512 -in "${public}/ssl.csr" -out "${public}/ssl.crt"

#############

#############

 find "${bootfs}/public" -type f -exec openssl sha512 {} +|sort -u|gpg --homedir "${keyfs}/gnupg" --clear-sign --yes > "${bootfs}/manifest"

 busybox pkill -x gpg-agent

#############

